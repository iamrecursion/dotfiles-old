# Get the shell evaluation context
[[ $ZSH_EVAL_CONTEXT == 'toplevel:file' ]];
file_being_sourced=$?

# Compinstall =================================================================

# The following lines were added by compinstall
#zstyle :compinstall filename '/home/ara/.zshrc'
#autoload -Uz compinit
#compinit End of lines added by compinstall

# Get Operating System ========================================================

platform=""

platform_macos="macos"
platform_linux="linux"

detect_platform () {
    if [[ "${OSTYPE}" == "linux-gnu" ]]; then
        platform=${platform_linux}
    elif [[ "${OSTYPE}" == "linux-musl" ]]; then
        platform=${platform_linux}
    elif [[ "${OSTYPE}" == "darwin"* ]]; then
        platform=${platform_macos}
    else
        >&2 echo "Unknown platform";
        return 1;
    fi
}
detect_platform

# Check for WSL ===============================================================

is_wsl=""

detect_wsl () {
    if [[ `uname -a` == *"microsoft"* ]]; then
        is_wsl=true
    else
        is_wsl=false
    fi
}
detect_wsl

# Locale ======================================================================

if [[ "${platform}" == "${platform_linux}" ]]; then
    export LANG='en_GB.UTF-8'
    export LANGUAGE='en_GB.UTF-8'
    export LC_ALL='en_GB.UTF-8'
    export LC_MESSAGES='en_GB.UTF-8'
fi

# ZPlug =======================================================================

source ~/.dotfiles/modules/zplug/init.zsh

# Load Plugins (Handling some potential Crashes)
zplug "zsh-users/zsh-syntax-highlighting"
zplug "zsh-users/zsh-history-substring-search", \
    use:"./zsh-history-substring-search.zsh", \
    on:"zsh-users/zsh-syntax-highlighting"
zplug "zsh-users/zsh-autosuggestions"
zplug "plugins/git", from:oh-my-zsh
zplug "plugins/command-not-found", from:oh-my-zsh
zplug "plugins/compleat", from:oh-my-zsh
zplug "plugins/git-extras", from:oh-my-zsh
zplug "hchbaw/zce.zsh", from:github, use:"./zce.zsh"
zplug "mafredri/zsh-async", from:github, use:"./async.zsh"
zplug "Tarrasch/zsh-functional", from:github, use:"./functional.plugin.zsh"
zplug "psprint/ztrace", from:github, use:"./ztrace.plugin.zsh"
zplug "Tarrasch/zsh-autoenv", from:github, use:"./init.sh"
zplug "b4b4r07/enhancd", from:github, use:"./init.sh"

# Load OMZ
zplug "robbyrussell/oh-my-zsh", use:"./lib/*.zsh"

# Load Theme
zplug "~/.dotfiles/themes/", from:local, use:"recursion_pure.zsh-theme"

# Install Plugins
if [[ ! -v INTELLIJ_ENVIRONMENT_READER ]]; then
    if ! zplug check --verbose; then
        printf "Install? [y/N]: "
        if read -q; then
            echo; zplug install
        fi
    fi
fi

zplug load

# Input Control ===============================================================

if [[ ! -v INTELLIJ_ENVIRONMENT_READER ]]; then
    DISPLAY_SAVE=$DISPLAY;
    unset DISPLAY;

    autoload zkbd
    [[ ! -f ~/.zkbd/$TERM-${${DISPLAY:t}:-$VENDOR-$OSTYPE} ]] && zkbd
    source ~/.zkbd/$TERM-${${DISPLAY:t}:-$VENDOR-$OSTYPE}

    [[ -n ${key[Backspace]} ]] && bindkey "${key[Backspace]}" backward-delete-char
    [[ -n ${key[Insert]} ]] && bindkey "${key[Insert]}" overwrite-mode
    [[ -n ${key[Home]} ]] && bindkey "${key[Home]}" beginning-of-line
    [[ -n ${key[PageUp]} ]] && bindkey "${key[PageUp]}" up-line-or-history
    [[ -n ${key[Delete]} ]] && bindkey "${key[Delete]}" delete-char
    [[ -n ${key[End]} ]] && bindkey "${key[End]}" end-of-line
    [[ -n ${key[PageDown]} ]] && bindkey "${key[PageDown]}" down-line-or-history
    [[ -n ${key[Up]} ]] && bindkey "${key[Up]}" up-line-or-search
    [[ -n ${key[Left]} ]] && bindkey "${key[Left]}" backward-char
    [[ -n ${key[Down]} ]] && bindkey "${key[Down]}" down-line-or-search
    [[ -n ${key[Right]} ]] && bindkey "${key[Right]}" forward-char

    export DISPLAY=$DISPLAY_SAVE
fi

# Additional Configuration ===================================================

# History Configuration
HISTFILE=~/.histfile
HISTSIZE=100000
SAVEHIST=100000

# Matching Configuration
setopt autocd             # Allows typing a directory name to cd to it
setopt extendedglob       # Allows non (ba)sh compatible globbing
setopt nomatch            # Show failed glob warnings
setopt notify             # Notify users on glob errors
setopt inc_append_history # Dynamically append to history

# No Beep
unsetopt appendhistory
unsetopt beep

# Keymap
bindkey -v
KEYTIMEOUT=1

# Enhancd Configuration
export ENHANCD_DOT_ARG=0

# History Substring Search Keybindings
zmodload zsh/terminfo
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# ZSH Autosuggestions Configuration
bindkey "^ " autosuggest-accept
bindkey "^H" autosuggest-clear
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=blue'
ZSH_AUTOSUGGEST_STRATEGY=(match_prev_cmd completion)
ZSH_AUTOSUGGEST_USE_ASYNC=1

# Timezone (Only Set on Linux)
if [[ "${platform}" == "${platform_linux}" ]]; then
    export TZ="Europe/London"
fi

# Environment Setup
if [[ ${is_wsl} = true ]]; then
    export DISPLAY=$(awk '/nameserver / {print $2; exit}' /etc/resolv.conf 2>/dev/null):0
    export LIBGL_ALWAYS_INDIRECT=1
fi

# Basic Tool Setup
export EDITOR=nvim
export PAGER="less -R"

# Neovim Configuration
alias nvimrc="nvim ~/.dotfiles/nvim/init.vim"
alias nvi="nvim"

# Tmux Configuration
alias tmuxconf="nvim ~/.dotfiles/tmux/tmux.conf"

# ZSH Configuration
alias zshrc="nvim ~/.dotfiles/zsh/zshrc"
alias reload="source ~/.dotfiles/zsh/zshrc"

# Generic Utility Aliases
alias nettest="ping 8.8.8.8"
alias dnstest="ping google.com"

# MacOS Specific Utility Aliases
if [[ ${platform} == "${platform_macos}" ]]; then
    alias resetcam="sudo killall VDCAssistant"
    alias resetcam!="sudo killall VDCAssistant"
fi

# WSL-Specific Utility Aliases
if [[ ${is_wsl} = true ]]; then
    alias cdo=cd "/mnt/d/Users/Ara Adkins/OneDrive"
else
    alias cdo=cd ~/OneDrive
fi

# Navigation Aliases
if [[ ${platform} == "${platform_macos}" ]]; then
    alias ls="gls -F --color=auto --group-directories-first";
elif [[ ${platform} == "${platform_linux}" ]]; then
    alias ls="ls -F --color=auto --group-directories-first";
fi

alias ll="ls -lh"
alias lll="ls -lah"
alias cdh="cd ~/"
alias u="cd .."

if [[ ${platform} == "${platform_macos}" ]]; then
    alias cdc="cd ~/CloudDrive"
fi

# Git Aliases
alias gb="git branch -va"

# Time Enhancement
export TIMEFMT=$'\nreal\t%*E\nuser\t%*U\nsys\t%*S\nmaxmem\t%M MB\nfaults\t%F'

# Tmux Utility Functions
function redisp() {
    if [ -n "$TMUX" ]; then
        eval "export $(tmux show-environment DISPLAY)"
    fi
}

# Mkdir Utility Function
function mkcd() {
    mkdir -p $1;
    cd $1
}

# PATH Changes
ruby_homebrew_path=/usr/local/opt/ruby/bin
if [[ -d $ruby_homebrew_path ]] && [[ PATH != *$ruby_homebrew_path* ]]; then
    export PATH=$ruby_homebrew_path:$PATH
fi

ruby_version=`ruby -v | awk '{split($2, res, "."); print res[1] "." res[2] }'`.0
ruby_gem_path=~/.gem/ruby/$ruby_version/bin
if [[ -d $ruby_gem_path ]] && [[ $PATH != *$ruby_gem_path* ]]; then
    export PATH=$ruby_gem_path:$PATH
fi

cargo_bin_path=~/.cargo/bin
if [[ -d $cargo_bin_path ]] && [[ $PATH != *$cargo_bin_path* ]]; then
    export PATH=$cargo_bin_path:$PATH
fi

cabal_bin_path=~/.cabal/bin
if [[ -d $cabal_bin_path ]] && [[ $PATH != *$cabal_bin_path* ]]; then
    export PATH=$cabal_bin_path:$PATH
fi

cabal_lib_path=~/.cabal/lib
if [[ -d $cabal_lib_path ]] && [[ $PATH != *$cabal_lib_path* ]]; then
    export PATH=$cabal_lib_path:$PATH
fi

usr_local_bin_dir=/usr/local/bin
if [[ -d $usr_local_bin_dir ]] && [[ $PATH != *$usr_local_bin_dir* ]]; then
    export PATH=$usr_local_bin_dir:$PATH
fi

iterm2_integration=${HOME}/.iterm2_shell_integration.zsh

if [[ -e $iterm2_integration ]]; then
    source $iterm2_integration;
fi

if hash pyenv 2>/dev/null; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
fi

if which pyenv-virtualenv-init > /dev/null; then
    eval "$(pyenv virtualenv-init -)";
fi

py_version=`python3 --version | awk '{split($2, r, "."); print r[1] "." r[2]}'`

if [[ ${platform} == "macos" ]]; then
    py_bin_path=~/Library/Python/$py_version/bin

    if [[ -d $py_bin_path ]] && [[ $PATH != *$py_bin_path* ]]; then
        export PATH=$py_bin_path:$PATH
    fi
fi

local_bin_dir=~/.local/bin
if [[ -d $local_bin_dir ]] && [[ $PATH != *$local_bin_dir* ]]; then
    export PATH=$local_bin_dir:$PATH
fi

nix_profile_script=~/.nix-profile/etc/profile.d/nix.sh
if [[ -f $nix_profile_script ]]; then
    source $nix_profile_script
fi

opam_command="opam"
if type "$opam_command" > /dev/null; then
    opam_path_ext=${HOME}/.opam/default/bin

    if [[ $PATH != *${opam_path_ext}* ]]; then
        eval "$(opam config env)"
    fi
fi

jenv_bin_dir=~/.jenv/bin
if hash jenv 2>/dev/null; then
    if [[ $PATH != *${jenv_bin_dir}* ]]; then
        export PATH=${jenv_bin_dir}:$PATH

        eval "$(jenv init -)"
    fi
fi

[ -f "/Users/ara/.ghcup/env" ] && source "/Users/ara/.ghcup/env"

export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
if [[ -d $NVM_DIR ]]; then
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
fi
arch_nvm_script=/usr/share/nvm/init-nvm.sh
if [[ -f $arch_nvm_script ]]; then
    source $arch_nvm_script;
fi

igv_path=~/Applications/idealgraphvisualizer/bin/idealgraphvisualizer
if [[ -f $igv_path ]]; then
    alias igv=$igv_path
fi

if [[ "${platform}" == "${platform_macos}" ]]; then
    jvisualvm_path_mac=/Library/Java/JavaVirtualMachines/graalvm-ee*/Contents/Home/bin/jvisualvm
    if [[ -f $jvisualvm_path_mac ]]; then
        alias jvisualvm=$jvisualvm_path_mac
    fi
fi

# Dircolors
if [[ "${platform}" == "macos" ]]; then
    eval `gdircolors ~/.dotfiles/modules/dircolors-solarized/dircolors.256dark`
else
    eval `dircolors ~/.dotfiles/modules/dircolors-solarized/dircolors.256dark`
fi

# GPG Configuration
if [[ "${platform}" = "${platform_linux}" ]]; then
    export GPG_TTY=$(tty)
fi

# Fancy Ctrl+Z
fancy-ctrl-z () {
    if [[ $#BUFFER -eq 0 ]]; then
        BUFFER="fg"
        zle accept-line
    else
        zle push-input
        zle clear-screen
    fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

# MacOS Library Overrides
if [[ ${platform} == "macos" ]]; then
    libffi_path="/usr/local/opt/libffi/lib/pkgconfig/libffi.pc"

    if [[ $PKG_CONFIG_PATH != *$libffi_path* ]]; then
        export PKG_CONFIG_PATH=$libffi_path:$PKG_CONFIG_PATH
    fi
fi

# Setup SSH Agent
export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR/ssh-agent.socket"
if [[ ! -v INTELLIJ_ENVIRONMENT_READER ]]; then
    eval $(keychain --quiet --eval ~/.ssh/ara_adkins_personal)
fi

# Configure GPG Agent

if [[ ${platform} == "macos" ]]; then
    export GPG_TTY="tty"
fi

# Useful Dev Tooling
load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}

if type "nvm" &> /dev/null; then
    autoload -U add-zsh-hook
    add-zsh-hook chpwd load-nvmrc
    load-nvmrc
fi
